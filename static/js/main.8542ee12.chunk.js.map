{"version":3,"sources":["utils/utils.js","components/Button.jsx","components/Citizen.jsx","components/RecursiveTreeView.jsx","App.jsx","index.jsx"],"names":["createCityElement","id","cityEntity","Object","assign","toString","type","name","children","addNewCitizen","citizen","indexItem","currentParentItem","items","newCitizen","keyID","nanoid","cityID","city_id","length","push","getStructure","currentParent","currentId","idList","structure","reduce","accumulator","item","groups","forEach","index","list","currentGrandParent","find","element","grandParent","currentChild","currentElement","useStyles","makeStyles","theme","root","margin","spacing","ContainedButtons","props","classes","React","useState","isExpand","state","setState","className","Button","variant","color","onClick","prevState","expandEverything","collapseEverything","HtmlTooltip","withStyles","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","Tooltip","Citizen","citizenCityID","city","cityList","filter","cityDescription","concat","data","title","Fragment","Typography","placement","aria-label","TreeItem","nodeId","nodeIdItem","label","labelItem","height","flexGrow","RecursiveTreeView","expanded","setExpanded","renderTree","node","Array","isArray","map","citiesList","expandedItems","TreeView","defaultCollapseIcon","defaultExpandIcon","onNodeToggle","event","nodeIds","dataTree","child","defaultProps","window","addEventListener","document","replace","App","cities","setCities","setCitizens","dataStructure","setDataStructure","fetchCities","a","axios","get","process","response","useEffect","citiesFromServer","getCities","fetchCitizens","citizensFromServer","getCitizens","mountNode","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8542ee12.chunk.js","sourcesContent":["import nanoid from \"nanoid\";\r\n\r\nconst createCityElement = (id, cityEntity) => {\r\n  return Object.assign({}, {\r\n    id: id.toString(),\r\n    type: cityEntity.type,\r\n    name: cityEntity.name,\r\n    children: [],\r\n  });\r\n};\r\n\r\nconst addNewCitizen = (citizen, indexItem, currentParentItem, items) => {\r\n  const newCitizen = Object.assign({}, {\r\n    keyID: nanoid(),\r\n    cityID: citizen.city_id,\r\n    type: 'citizen',\r\n    name: citizen.name,\r\n  });\r\n\r\n  if(indexItem === items.length - 1) {\r\n    currentParentItem.children.push(newCitizen);\r\n  }\r\n};\r\n\r\nexport const getStructure = (items) => {\r\n  let currentParent = null;\r\n  let currentId = 0;\r\n\r\n  const idList = [];\r\n  let structure;\r\n\r\n  structure = items.reduce((accumulator, item) => {\r\n\r\n    item.groups.forEach((cityEntity, index, list) => {\r\n      if(index === 0) {\r\n        let currentGrandParent = accumulator.find((element) => element.name === cityEntity.name);\r\n        if(currentGrandParent) {\r\n          currentParent = currentGrandParent;\r\n        } else {\r\n          let grandParent = createCityElement(currentId, cityEntity);\r\n          accumulator.push(grandParent);\r\n          idList.push(grandParent.id);\r\n          ++currentId;\r\n          currentParent = grandParent;\r\n        }\r\n      } else {\r\n        let currentChild = currentParent.children.find((element) => element.name === cityEntity.name);\r\n        if(currentChild) {\r\n          currentParent = currentChild;\r\n\r\n          addNewCitizen(item, index, currentParent, list);\r\n        } else {\r\n          const currentElement = createCityElement(currentId, cityEntity);\r\n\r\n          currentParent.children.push(currentElement);\r\n          idList.push(currentElement.id);\r\n\r\n          ++currentId;\r\n          currentParent = currentElement;\r\n\r\n          addNewCitizen(item, index, currentParent, list);\r\n        }\r\n      }\r\n    });\r\n    return accumulator;\r\n  }, []);\r\n\r\n  return {\r\n    structure,\r\n    idList\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ContainedButtons(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({isExpand: true});\r\n\r\n  const handleToggle = () => {\r\n    setState(prevState => ({\r\n      isExpand: !prevState.isExpand\r\n    }));\r\n    state.isExpand ? props.expandEverything() : props.collapseEverything();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={() => handleToggle()}>\r\n        {state.isExpand ? 'Expand All' : 'Collapse All'}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nContainedButtons.propTypes = {\r\n  expandEverything: PropTypes.func,\r\n  collapseEverything: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst FIRST_ITEM = 0;\r\n\r\nconst getCityData = (citizenCityID, cityList) => {\r\n  const cityData = cityList.filter((city) => city.id === citizenCityID);\r\n  return cityData;\r\n};\r\n\r\nconst HtmlTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: '#f5f5f9rgba(0, 0, 0, 0.87)',\r\n    color: '#f5f5f9',\r\n    maxWidth: 220,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: '1px solid #dadde9',\r\n  },\r\n}))(Tooltip);\r\n\r\nexport default function Citizen(props) {\r\n  let city = getCityData(props.cityID, props.cityList);\r\n  city = city[FIRST_ITEM];\r\n  const cityDescription = city.name.concat(', ', city.data, ' жителей'); // Москва, 10000000 жителей\r\n\r\n  return (\r\n    <HtmlTooltip\r\n      title={\r\n        <React.Fragment>\r\n          <Typography color=\"inherit\">{cityDescription}</Typography>\r\n        </React.Fragment>\r\n      }\r\n      placement=\"top-start\"\r\n      aria-label=\"citizen\">\r\n        <TreeItem nodeId={props.nodeIdItem} label={props.labelItem} />\r\n    </HtmlTooltip >\r\n  );\r\n}\r\n\r\nCitizen.propTypes = {\r\n  nodeIdItem: PropTypes.string,\r\n  labelItem: PropTypes.string,\r\n  cityList: PropTypes.array,\r\n  cityID: PropTypes.number,\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport ContainedButtons from \"./Button\";\r\nimport Citizen from \"./Citizen\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 110,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n});\r\n\r\nexport default function RecursiveTreeView(props) {\r\n  const classes = useStyles();\r\n\r\n  const [expanded, setExpanded] = React.useState([]);\r\n\r\n  const setExpandAll = () => {\r\n    setExpanded(props.expandedItems)\r\n  };\r\n\r\n  const setCollapseAll = () => {\r\n    setExpanded([]);\r\n  };\r\n\r\n  const handleToggle = (event, nodeIds) => {\r\n    setExpanded(nodeIds);\r\n  };\r\n\r\n  const renderTree = (node) => {\r\n    return (\r\n      Array.isArray(node.children) ?\r\n        <TreeItem key={node.id} nodeId={(node.id)} label={node.name}>\r\n          {\r\n             node.children.map((item) => renderTree(item))\r\n          }\r\n        </TreeItem>\r\n      : <Citizen\r\n          key={node.keyID}\r\n          nodeIdItem={node.keyID}\r\n          labelItem={node.name}\r\n          cityID={node.cityID}\r\n          cityList={props.citiesList}\r\n        />\r\n    );\r\n  };\r\n\r\n  const renderParent = (items) => {\r\n    return items.map((item) => {\r\n      return (\r\n        <TreeItem key={item.id} nodeId={item.id} label={item.name} >\r\n          {item.children && (item.children.length !== 0) ? item.children.map((child) => renderTree(child)) : null}\r\n        </TreeItem>\r\n      )\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ContainedButtons expandEverything={setExpandAll} collapseEverything={setCollapseAll}/>\r\n      <TreeView\r\n        className={classes.root}\r\n        defaultCollapseIcon={<ExpandMoreIcon />}\r\n        defaultExpandIcon={<ChevronRightIcon />}\r\n        expanded={expanded}\r\n        onNodeToggle={handleToggle}\r\n      >\r\n        {renderParent(props.dataTree)}\r\n      </TreeView>\r\n    </>\r\n  );\r\n}\r\n\r\nRecursiveTreeView.propTypes = {\r\n  dataTree: PropTypes.array,\r\n  expandedItems: PropTypes.array,\r\n  citiesList: PropTypes.array,\r\n};\r\n\r\nRecursiveTreeView.defaultProps = {\r\n  dataTree: [],\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\nimport {getStructure} from \"./utils/utils\";\r\n\r\nimport RecursiveTreeView from \"./components/RecursiveTreeView\";\r\n\r\nwindow.addEventListener('online', () => {\r\n  document.title = document.title.replace(' [offline]', '');\r\n});\r\n\r\nwindow.addEventListener('offline', () => {\r\n  document.title += ' [offline]';\r\n});\r\n\r\nconst App = () => {\r\n  const [cities, setCities] = useState([]);\r\n  const [citizens, setCitizens] = useState([]);\r\n  const [dataStructure, setDataStructure] = useState([]);\r\n\r\n  const fetchCities = async () => {\r\n    const response = await axios.get(`${process.env.REACT_APP_API_PATH}:${process.env.REACT_APP_API_PORT}/cities`);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCities = async () => {\r\n      const citiesFromServer = await fetchCities();\r\n      setCities(citiesFromServer);\r\n    };\r\n\r\n    getCities();\r\n  }, []);\r\n\r\n  const fetchCitizens = async () => {\r\n    const response = await axios.get(`${process.env.REACT_APP_API_PATH}:${process.env.REACT_APP_API_PORT}/citizens`);\r\n\r\n    return response.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCitizens = async () => {\r\n      const citizensFromServer = await fetchCitizens();\r\n      setCitizens(citizensFromServer);\r\n      setDataStructure(getStructure(citizensFromServer));\r\n    };\r\n\r\n    getCitizens();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <RecursiveTreeView\r\n        dataTree={dataStructure.structure}\r\n        expandedItems={dataStructure.idList}\r\n        citiesList={cities}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./css/normalize.css\";\n\nconst mountNode = document.getElementById(\"root\");\nReactDOM.render(<App />, mountNode);\n"],"sourceRoot":""}